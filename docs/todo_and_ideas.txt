To-do's & ideas for future improvements / additional features.

1. Standardise power demand profile timespans.
	- Create standards for year / month / day in hourly steps.
	- All subsystems that generate / use power demand must be adapted.
	- This is so that the mini-grid can be designed based on different
	  power demand profiles. Or power demand profiles can be repeated
	  to create profiles that cover a longer timespan.
	
	Example: customer demand profiles cover 24hrs. The mini-grid is
	  designed based on a full year and solar power is retrieved for a 
	  full year too. This means that the standard profile for the design
	  process should be a year, so the 24hr demand profile should be 
	  repeated 365 in order to cover a full year. It would be useful to
	  to have a toggle for the profile type and have all the subsystems
	  respect it.

2. Optimise performance of generation sizer (gensizer.py).
	- The PSO algorithm could be faster. As of right now it is written
	  with many for loops inside, which are quite slow in Python. It may
	  be worth refactoring the way in which particle velocities and 
	  positions are handled.
	- Probably a smart idea to use numpy and vectorised operations instead
	  of lists and for loops.

4. Change generation sizer cost calculation.
	- The objective function (cost) uses fixed parameters which come from
	  a fixed discount rate.
	- Cost is calculated using NPV which needs a discount ratio (r) and a
	  payback period (time).

3. Translate MATLAB "Economic Evaluation" into Python
	- Last subsystem of original MATALB program to be translated into 
	  Python.
	- File is "EconomyExpert720.m".

4. Make KML, KMZ reader & writer module.
	- KML and KMZ are files for drawing on maps and storing data.
	
	Example use case: a mini-grid designer surveys a village for a
	  potential electrification project. They map out the position of each
	  customer (homes/businesses etc...) and their respective esitmated
	  power demand using a map tool which saves data to a KML file or 
	  similar. It would be immensily useful if the designer could then use
	  the created file directly with our tool - so positions, power
	  demands and other useful data is extracted and used.

5. Create object for storing network parameters.
	- Everytime network parameters (cable specs, net volt, etc.) are
	  needed they are provided as parameters for [whatever] class needs
	  them.
	- Probably useful to have a single class which stores network
	  parameters.
	- This class (object) can then be passed in as a parameter for
	  whichever class needs the network parameters.

6. Build network ignoring constraints in NetworkDesigner object.
	- Could be useful to have the possibility of generating an "ideal"
	  network.
	- Could be implemented by passing an argument in the build_network()
	  method.
